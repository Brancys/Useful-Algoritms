//O(logn) time and O(1) space
class Solution {
    public int searchRange(int[] nums, int target) {
        int[] result = new int[2];
        result[0] = getStart(nums, target);
        result[1] = getEnd(nums, target);
        return result[1]-result[0]+1;
    }
    
    public int getStart(int[] nums, int target){
        int low = 0, high = nums.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(((mid==low) && (nums[mid]==target)) || ((nums[mid]==target)&&(nums[mid]!=nums[mid-1]))) 
                return mid;
            else if(nums[mid]>=target)
                high = mid-1;
            else 
                low = mid+1;
        }
        return -1;
    }
    
    public int getEnd(int[] nums, int target){
        int low = 0,  high = nums.length-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if(((mid==high) && (nums[mid]==target)) || ((nums[mid]==target)&&(nums[mid]!=nums[mid+1]))) 
                return mid;
            else if(nums[mid]<=target)
                low = mid+1;
            else 
                high = mid-1;
        }
        return -1;
    }
}
