package DynamicProgramming;
import java.util.*;

public class MaxSumSubarraycontinuous3 {

    //O(n) time and space
    public int method(int[] arr){
        if(arr==null || arr.length==0) return 0;
        if(arr.length==1) return arr[0];
        if(arr.length==2) return arr[0]+arr[1];
        int n = arr.length;
        int[] dp = new int[n];
        dp[0] = arr[0];
        dp[1] = arr[1]+arr[0];
        dp[2] =  Math.max(dp[1], Math.max(arr[2]+dp[0],arr[2]+arr[1]));
        for(int i=3;i<n;i++){
            dp[i] = Math.max(dp[i-1], Math.max(arr[i]+dp[i-2],arr[i]+arr[i-1]+dp[i-3]));
        }
        return dp[n-1];
    }
    public static void main(String[] args) {
        int[] arr = {100, 1000, 100, 1000, 1};
        MaxSumSubarraycontinuous3 m = new MaxSumSubarraycontinuous3();
        System.out.println("Max cost is "+m.method(arr));
    }
}

