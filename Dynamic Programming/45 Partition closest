package DynamicProgramming;
import java.util.*;

public class MinDiffernce {
    //O(n*k) time and space
    public int method(int[] arr){
        if(arr==null || arr.length==0) return 0;
        int n = arr.length;
        int sum = 0;
        for(int a:arr) sum+=a;
        boolean[][] dp = new boolean[n+1][sum+1];
        for(int i=0;i<=n;i++)
            dp[i][0] = true;
        for(int i=1;i<=n;i++){
            for(int j=1;j<=sum;j++){
                if(j-arr[i-1]>=0){
                    dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
                }
                else
                    dp[i][j] = dp[i-1][j];
            }
        }
        int min = Integer.MAX_VALUE;
        for(int j = sum/2; j>=0; j--){
            if(dp[n][j]==true){
                min = Math.min(min, sum-2*j);
                break;
            }
        }
        return min;
    }

    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        MinDiffernce s = new MinDiffernce();
        System.out.println("Please enter the length of the array");
        int n = in.nextInt();
        System.out.println("Please enter the contents of the array");
        int[] arr = new int[n];
        for(int i=0;i<n;i++)
            arr[i] = in.nextInt();
        System.out.println("The max difference between j and i is "+s.method(arr));
        in.close();
    }
}
